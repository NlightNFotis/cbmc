name: Build and Test CBMC
on:
  pull_request:
    branches: [ smt_fast_response ]

jobs:
  check-ubuntu-20_04-cmake-gcc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -yq cmake ninja-build gcc gdb g++ maven flex bison libxml2-utils dpkg-dev ccache doxygen z3
      - name: Confirm z3 solver is available and log the version installed
        run: z3 --version
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-20.04-Release-${{ github.ref }}-${{ github.sha }}-PR
          restore-keys: |
            ${{ runner.os }}-20.04-Release-${{ github.ref }}
            ${{ runner.os }}-20.04-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++
      - name: Check that doc task works
        run: |
          cd build
          ninja doc
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Build with Ninja
        run: cd build; ninja -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Check if package building works
        run: |
          cd build
          ninja package
          ls *.deb
      - name: Run tests
        run: cd build; ctest . -V -L CORE -j2

  check-ubuntu-20_04-cmake-gcc-KNOWNBUG:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -yq cmake ninja-build gcc g++ maven flex bison libxml2-utils ccache z3
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-20.04-Release-${{ github.ref }}-${{ github.sha }}-PR
          restore-keys: |
            ${{ runner.os }}-20.04-Release-${{ github.ref }}
            ${{ runner.os }}-20.04-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Configure using CMake
        run: cmake -H. -Bbuild -G Ninja
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Build with Ninja
        run: ninja -C build -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Run tests
        run: |
          cd build
          ctest . -V -L KNOWNBUG -j2
          export PATH=$PWD/bin:$PATH
          cd ../regression/cbmc
          sed -i '1s/^CORE\(.*\)broken-smt-backend/KNOWNBUG\1broken-smt-backend/' */*.desc
          # the following test fails on some Unix systems
          git checkout -- r_w_ok6
          # the following tests fail on Windows only
          git checkout -- memory_allocation1 printf1 union12 va_list3
          ../test.pl -c "cbmc --cprover-smt2" -I broken-smt-backend -K

  check-macos-10_15-cmake-clang:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: brew install cmake ninja maven flex bison ccache z3
      - name: Confirm z3 solver is available and log the version installed
        run: z3 --version
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-Release-${{ github.ref }}-${{ github.sha }}-PR
          restore-keys: |
            ${{ runner.os }}-Release-${{ github.ref }}
            ${{ runner.os }}-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -Dsat_impl=glucose
      - name: Build with Ninja
        run: cd build; ninja -j3
      - name: Print ccache stats
        run: ccache -s
      - name: Run CTest
        run: cd build; ctest -V -L CORE . -j3

  check-vs-2019-cmake-build-and-test:
    runs-on: windows-2019
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.8.x'
      - name: Fetch dependencies
        run: |
          choco install winflexbison3
          nuget install clcache -OutputDirectory "c:\tools" -ExcludeVersion -Version 4.1.0
          echo "c:\tools\clcache\clcache-4.1.0" >> $env:GITHUB_PATH
          Invoke-WebRequest -Uri https://github.com/Z3Prover/z3/releases/download/z3-4.8.10/z3-4.8.10-x64-win.zip -OutFile .\z3.zip
          Expand-Archive -LiteralPath '.\z3.Zip' -DestinationPath C:\tools
          echo "c:\tools\z3-4.8.10-x64-win\bin;" >> $env:GITHUB_PATH
      - name: Confirm z3 solver is available and log the version installed
        run: z3 --version
      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-msbuild-${{ github.ref }}-${{ github.sha }}-PR
          restore-keys: |
            ${{ runner.os }}-msbuild-${{ github.ref }}
            ${{ runner.os }}-msbuild
      - name: ccache environment
        run: |
          echo "CLCACHE_BASEDIR=$((Get-Item -Path '.\').FullName)" >> $env:GITHUB_ENV
          echo "CLCACHE_DIR=$pwd\.ccache" >> $env:GITHUB_ENV
      - name: Configure with cmake
        run: cmake -S . -B build
      - name: Build Release
        run: cmake --build build --config Release -- /p:UseMultiToolTask=true /p:CLToolExe=clcache
      - name: Print ccache stats
        run: clcache -s
      - uses: ilammy/msvc-dev-cmd@v1.4.1
      - name: Test cbmc
        run: |
          Set-Location build
          ctest -V -L CORE -C Release . -j2        

  check-clang-format:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -yq clang-format-7
      - name: Check updated lines of code match clang-format-7 style
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-clang-format.sh

  check-cpplint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -yq python3-unidiff
      - name: Check updated lines of code meet linting standards
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-cpplint.sh

  check-string-table:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Check for unused irep ids
        run: ./scripts/string_table_check.sh
